generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id String @id @default(uuid())

  name String?
  email String? @unique
  username String @unique
  avatarUrl String?
  
  installationId String? @unique
  githubId String @unique

  classrooms ClassroomRelation[]
  teams TeamRelation[]
  repositories Repository[]

  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model ClassroomRelation {
  role ClassroomRoles @default(STUDENT)
  
  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime?
  updatedBy String?

  @@id([classroomId, userId])
}

model Classroom {
  id String @id @default(uuid())
  inviteCode String @unique @default(uuid())

  title String
  subject String?
  description String?

  users ClassroomRelation[]
  alerts Alert[]
  teams Team[]
  repositories Repository[]

  rolesAreRestricted Boolean @default(false)
  teamsAreRestricted Boolean @default(false)
  inviteCodeIsRestricted Boolean @default(true)
  repositoriesAreRestricted Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime?
  updatedBy String?
}

model Team {
  id String @id @default(uuid())

  title String
  description String?

  users TeamRelation[]
  alerts Alert[]

  classroom Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String
  
  repository Repository? @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime?
  updatedBy String?
}

model TeamRelation {
  role TeamRoles @default(MEMBER)

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime?
  updatedBy String?

  @@id([teamId, userId])
}

model Repository {
  id String @id @default(uuid())

  name String
  fullname String @unique
  description String?

  homepage String?
  gitUrl String
  sshUrl String?

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  commits Commit[]
  alerts Alert[]
  teams Team[]
  classrooms Classroom[]

  visibility RepositoryVisibility @default(PUBLIC)

  status RepositoryStatus @default(NOT_REQUESTED)

  createdAt DateTime @default(now())
  updatedAt DateTime?
  updatedBy String?
}

model Commit {
  id String @id @default(uuid())

  sha String @unique

  message String?
  
  isForced Boolean @default(false)

  url String

  filesAdded Int @default(0)
  filesRemoved Int @default(0)
  filesModified Int @default(0)

  totalChanges Int @default(0)
  totalAdditions Int @default(0)
  totalDeletions Int @default(0)

  churn Int @default(0)
  complexity Int @default(0)
  sloc Int @default(0)

  methods String[]
  classes String[]

  userGithubId String?
  userGithubLogin String?

  repository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String

  alerts Alert[]

  commitedAt DateTime?
  createdAt DateTime @default(now())

  order Int @default(0)
}

model Alert {
  id String @id @default(uuid())

  type AlertTypes
  avatarUrl String?
  description String

  classroom Classroom? @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String?

  team Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String?

  repository Repository? @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String?

  commit Commit? @relation(fields: [commitId], references: [id], onDelete: Cascade)
  commitId String?

  visualizedBy String[]

  createdAt DateTime @default(now())
}

enum AlertTypes { 
  CLASSROOM
  CLASSROOM_RELATION
  TEAM
  TEAM_RELATION
  REPOSITORY
  COMMIT
}

enum ClassroomRoles { 
  OWNER
  ADMIN
  OBSERVER
  STUDENT
}

enum TeamRoles { 
  LEADER
  MEMBER
}

enum RepositoryStatus { 
  NOT_REQUESTED
  REQUESTED
  LOADED
}

enum RepositoryVisibility { 
  PUBLIC
  PRIVATE
  VISIBLE_FOR_TEAMS
  VISIBLE_FOR_CLASSROOMS
}